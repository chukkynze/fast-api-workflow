services:

###########################################
# Core Services
###########################################

  # The Client (Backend) API
  ###########################################
  client_api:
    container_name: client-api
    hostname: client-api-docker-local
    command: sh -c "uvicorn app.main:app --reload --port=80 --host=0.0.0.0"
    build:
      context: ./
      dockerfile: services/client_api/python3_12.dockerfile
      args:
        - GIT_USERNAME=${GIT_USERNAME}
        - GIT_EMAIL=${GIT_EMAIL}
    environment:
      # REDIS_OM_URL: redis://[[username]:[password]]@localhost:6379/[database number]
      REDIS_OM_URL: redis://client-redis-stack:6379
      APP_ENV: development
      PYTHONPATH: "$${PYTHONPATH}:/var/www/json"
#    develop:
#      watch:
#        - action: sync
#          path: ./volumes/repos/client_api
#          target: /var/www/json
#          ignore:
#            - ./volumes/repos/client_api/.venv
#        - action: rebuild
#          path: ./volumes/repos/client_api/requirements.txt
    volumes:
      - ./volumes/repos/client_api:/var/www/json
      - ./services/client_api/supervisord.conf:/etc/supervisor/supervisord.conf
      - ./services/client_api/aliases.bashrc:/root/aliases.bashrc
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${CLIENT_API_UVICORN_PORT}:80"
      - "${CLIENT_API_UVICORN_SSL_PORT}:443"
    networks:
      - gen-dev-network

###########################################
# Shared Resources
###########################################

  # Client Redis
  ###########################################
  client_redis:
    container_name: client-redis-stack
    hostname: client-redis-docker-local
    # this image is dev only. use redis/redis-stack-server for prod
    image: redis/redis-stack:7.4.0-v0
    environment:
      - REDIS_ARGS="--requirepass ${CLIENT_REDIS_PASSWORD}"
      #- REDISTIMESERIES_ARGS="RETENTION_POLICY=20"
      #- REDISEARCH_ARGS=""
      #- REDISJSON_ARGS=""
      #- REDISGRAPH_ARGS=""
      #- REDISBLOOM_ARGS=""
    volumes:
      - ./volumes/data/client/redis/data:/data
      - ./volumes/data/client/redis/config/redis-stack.conf:/redis-stack.conf
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${CLIENT_REDIS_PORT}:6379"
      - "${CLIENT_REDIS_INSIGHT_PORT}:8001"
    networks:
      - gen-dev-network

  # Client MySQL
  ###########################################
  client_mysqldb:
    container_name: client-mysqldb
    hostname: client-mysqldb-docker-local
    image: mysql:8.0.28
    command: mysqld --authentication-policy=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      - MYSQL_ROOT_PASSWORD=${CLIENT_MYSQLDB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${CLIENT_MYSQLDB_DATABASE}
      - MYSQL_USER=${CLIENT_MYSQLDB_USER}
      - MYSQL_PASSWORD=${CLIENT_MYSQLDB_PASSWORD}
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${CLIENT_MYSQLDB_PORT}:3306"
    volumes:
      - ./volumes/data/client/mysql/storage/persist:/var/lib/mysql
      - ./volumes/data/client/mysql/storage/startup:/docker-entrypoint-initdb.d
      - ./volumes/data/client/mysql/config/mysql.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - gen-dev-network

  # Client Postgres
  ###########################################
  client_postgresdb:
    container_name: client-postgresdb
    hostname: client-postgresdb-docker-local
    image: postgres:16.4-alpine
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${CLIENT_POSTGRESDB_PORT}:5432"
    volumes:
      - ./volumes/data/client/postgres/storage/persist:/var/lib/postgresql/data
      - ./volumes/data/client/postgres/storage/startup:/docker-entrypoint-initdb.d
#      - ./volumes/data/client/postgres/config/postgres.cnf:/etc/postgres/conf.d/my.cnf
    environment:
      - POSTGRES_PASSWORD=${CLIENT_POSTGRESDB_PASSWORD}
      - POSTGRES_USER=${CLIENT_POSTGRESDB_USER}
      - POSTGRES_DB=${CLIENT_POSTGRESDB_DATABASE}
    networks:
      - gen-dev-network

networks:

  gen-dev-network:
    driver: bridge